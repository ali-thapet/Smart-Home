
Smart House.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000124a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000106  00800060  0000124a  000012de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017f  00800166  00800166  000013e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000560  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041b9  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000153d  00000000  00000000  00005b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025c4  00000000  00000000  000070a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eb4  00000000  00000000  0000966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014da  00000000  00000000  0000a520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f63  00000000  00000000  0000b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0000e95d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_1>
       8:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_2>
       c:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_6>
      1c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_7>
      20:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_8>
      24:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_11>
      30:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_12>
      34:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_13>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_15>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_17>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	2d 05       	cpc	r18, r13
      56:	3a 05       	cpc	r19, r10
      58:	47 05       	cpc	r20, r7
      5a:	54 05       	cpc	r21, r4
      5c:	61 05       	cpc	r22, r1
      5e:	6e 05       	cpc	r22, r14
      60:	7b 05       	cpc	r23, r11

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	11 e0       	ldi	r17, 0x01	; 1
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e4       	ldi	r30, 0x4A	; 74
      76:	f2 e1       	ldi	r31, 0x12	; 18
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a6 36       	cpi	r26, 0x66	; 102
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	22 e0       	ldi	r18, 0x02	; 2
      86:	a6 e6       	ldi	r26, 0x66	; 102
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 3e       	cpi	r26, 0xE5	; 229
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 18 02 	call	0x430	; 0x430 <main>
      98:	0c 94 23 09 	jmp	0x1246	; 0x1246 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <WriteIns>:
	for(i=0;i<8;i++)
	{
		WriteData(pattern[i]);
	}
	WriteIns(0x80);
}
      a0:	cf 93       	push	r28
      a2:	c8 2f       	mov	r28, r24
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      ac:	6c 2f       	mov	r22, r28
      ae:	66 1f       	adc	r22, r22
      b0:	66 27       	eor	r22, r22
      b2:	66 1f       	adc	r22, r22
      b4:	86 e0       	ldi	r24, 0x06	; 6
      b6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      ba:	c6 fb       	bst	r28, 6
      bc:	66 27       	eor	r22, r22
      be:	60 f9       	bld	r22, 0
      c0:	85 e0       	ldi	r24, 0x05	; 5
      c2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      c6:	c5 fb       	bst	r28, 5
      c8:	66 27       	eor	r22, r22
      ca:	60 f9       	bld	r22, 0
      cc:	84 e0       	ldi	r24, 0x04	; 4
      ce:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      d2:	c4 fb       	bst	r28, 4
      d4:	66 27       	eor	r22, r22
      d6:	60 f9       	bld	r22, 0
      d8:	83 e0       	ldi	r24, 0x03	; 3
      da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      de:	61 e0       	ldi	r22, 0x01	; 1
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      e6:	8f ec       	ldi	r24, 0xCF	; 207
      e8:	97 e0       	ldi	r25, 0x07	; 7
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <WriteIns+0x4a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <WriteIns+0x50>
      f0:	00 00       	nop
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
      fa:	8f ec       	ldi	r24, 0xCF	; 207
      fc:	97 e0       	ldi	r25, 0x07	; 7
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <WriteIns+0x5e>
     102:	00 c0       	rjmp	.+0      	; 0x104 <WriteIns+0x64>
     104:	00 00       	nop
     106:	c3 fb       	bst	r28, 3
     108:	66 27       	eor	r22, r22
     10a:	60 f9       	bld	r22, 0
     10c:	86 e0       	ldi	r24, 0x06	; 6
     10e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     112:	c2 fb       	bst	r28, 2
     114:	66 27       	eor	r22, r22
     116:	60 f9       	bld	r22, 0
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     11e:	c1 fb       	bst	r28, 1
     120:	66 27       	eor	r22, r22
     122:	60 f9       	bld	r22, 0
     124:	84 e0       	ldi	r24, 0x04	; 4
     126:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     12a:	6c 2f       	mov	r22, r28
     12c:	61 70       	andi	r22, 0x01	; 1
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     13c:	8f ec       	ldi	r24, 0xCF	; 207
     13e:	97 e0       	ldi	r25, 0x07	; 7
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <WriteIns+0xa0>
     144:	00 c0       	rjmp	.+0      	; 0x146 <WriteIns+0xa6>
     146:	00 00       	nop
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     150:	8f ec       	ldi	r24, 0xCF	; 207
     152:	97 e0       	ldi	r25, 0x07	; 7
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <WriteIns+0xb4>
     158:	00 c0       	rjmp	.+0      	; 0x15a <WriteIns+0xba>
     15a:	00 00       	nop
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <WriteData>:
     160:	cf 93       	push	r28
     162:	c8 2f       	mov	r28, r24
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     16c:	6c 2f       	mov	r22, r28
     16e:	66 1f       	adc	r22, r22
     170:	66 27       	eor	r22, r22
     172:	66 1f       	adc	r22, r22
     174:	86 e0       	ldi	r24, 0x06	; 6
     176:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     17a:	c6 fb       	bst	r28, 6
     17c:	66 27       	eor	r22, r22
     17e:	60 f9       	bld	r22, 0
     180:	85 e0       	ldi	r24, 0x05	; 5
     182:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     186:	c5 fb       	bst	r28, 5
     188:	66 27       	eor	r22, r22
     18a:	60 f9       	bld	r22, 0
     18c:	84 e0       	ldi	r24, 0x04	; 4
     18e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     192:	c4 fb       	bst	r28, 4
     194:	66 27       	eor	r22, r22
     196:	60 f9       	bld	r22, 0
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1a6:	8f ec       	ldi	r24, 0xCF	; 207
     1a8:	97 e0       	ldi	r25, 0x07	; 7
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <WriteData+0x4a>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <WriteData+0x50>
     1b0:	00 00       	nop
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1ba:	8f ec       	ldi	r24, 0xCF	; 207
     1bc:	97 e0       	ldi	r25, 0x07	; 7
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <WriteData+0x5e>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <WriteData+0x64>
     1c4:	00 00       	nop
     1c6:	c3 fb       	bst	r28, 3
     1c8:	66 27       	eor	r22, r22
     1ca:	60 f9       	bld	r22, 0
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1d2:	c2 fb       	bst	r28, 2
     1d4:	66 27       	eor	r22, r22
     1d6:	60 f9       	bld	r22, 0
     1d8:	85 e0       	ldi	r24, 0x05	; 5
     1da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1de:	c1 fb       	bst	r28, 1
     1e0:	66 27       	eor	r22, r22
     1e2:	60 f9       	bld	r22, 0
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1ea:	6c 2f       	mov	r22, r28
     1ec:	61 70       	andi	r22, 0x01	; 1
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     1fc:	8f ec       	ldi	r24, 0xCF	; 207
     1fe:	97 e0       	ldi	r25, 0x07	; 7
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <WriteData+0xa0>
     204:	00 c0       	rjmp	.+0      	; 0x206 <WriteData+0xa6>
     206:	00 00       	nop
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
     210:	8f ec       	ldi	r24, 0xCF	; 207
     212:	97 e0       	ldi	r25, 0x07	; 7
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <WriteData+0xb4>
     218:	00 c0       	rjmp	.+0      	; 0x21a <WriteData+0xba>
     21a:	00 00       	nop
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <LCD_Init>:
     220:	2f e7       	ldi	r18, 0x7F	; 127
     222:	88 e3       	ldi	r24, 0x38	; 56
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <LCD_Init+0x6>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_Init+0x10>
     230:	00 00       	nop
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     238:	88 e2       	ldi	r24, 0x28	; 40
     23a:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     23e:	8c e0       	ldi	r24, 0x0C	; 12
     240:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     24a:	8f ec       	ldi	r24, 0xCF	; 207
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Init+0x2e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_Init+0x34>
     254:	00 00       	nop
     256:	86 e0       	ldi	r24, 0x06	; 6
     258:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     25c:	08 95       	ret

0000025e <LCD_WriteString>:
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	8c 01       	movw	r16, r24
     266:	c0 e0       	ldi	r28, 0x00	; 0
     268:	03 c0       	rjmp	.+6      	; 0x270 <LCD_WriteString+0x12>
     26a:	0e 94 b0 00 	call	0x160	; 0x160 <WriteData>
     26e:	cf 5f       	subi	r28, 0xFF	; 255
     270:	f8 01       	movw	r30, r16
     272:	ec 0f       	add	r30, r28
     274:	f1 1d       	adc	r31, r1
     276:	80 81       	ld	r24, Z
     278:	81 11       	cpse	r24, r1
     27a:	f7 cf       	rjmp	.-18     	; 0x26a <LCD_WriteString+0xc>
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <LCD_WriteChar>:
     284:	0e 94 b0 00 	call	0x160	; 0x160 <WriteData>
     288:	08 95       	ret

0000028a <LCD_WriteNumber8>:
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <LCD_WriteNumber8+0x8>
     292:	1f 92       	push	r1
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	18 2f       	mov	r17, r24
     29a:	19 82       	std	Y+1, r1	; 0x01
     29c:	1a 82       	std	Y+2, r1	; 0x02
     29e:	1b 82       	std	Y+3, r1	; 0x03
     2a0:	81 11       	cpse	r24, r1
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <LCD_WriteNumber8+0x20>
     2a4:	80 e3       	ldi	r24, 0x30	; 48
     2a6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_WriteChar>
     2aa:	41 2f       	mov	r20, r17
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	0e 94 83 08 	call	0x1106	; 0x1106 <NUM_tostring>
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LCD_WriteNumber8+0x3a>
     2be:	0e 94 b0 00 	call	0x160	; 0x160 <WriteData>
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	e1 e0       	ldi	r30, 0x01	; 1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	ec 0f       	add	r30, r28
     2ca:	fd 1f       	adc	r31, r29
     2cc:	e1 0f       	add	r30, r17
     2ce:	f1 1d       	adc	r31, r1
     2d0:	80 81       	ld	r24, Z
     2d2:	18 17       	cp	r17, r24
     2d4:	a0 f3       	brcs	.-24     	; 0x2be <LCD_WriteNumber8+0x34>
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <LCD_SetCursor>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	c8 2f       	mov	r28, r24
     2ea:	d6 2f       	mov	r29, r22
     2ec:	81 11       	cpse	r24, r1
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <LCD_SetCursor+0x14>
     2f0:	86 2f       	mov	r24, r22
     2f2:	80 68       	ori	r24, 0x80	; 128
     2f4:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     2f8:	c1 30       	cpi	r28, 0x01	; 1
     2fa:	29 f4       	brne	.+10     	; 0x306 <LCD_SetCursor+0x22>
     2fc:	80 e4       	ldi	r24, 0x40	; 64
     2fe:	8d 0f       	add	r24, r29
     300:	80 68       	ori	r24, 0x80	; 128
     302:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <LCD_Clear>:

void LCD_Clear(void)
{
	WriteIns(0x01);//clear screen
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 50 00 	call	0xa0	; 0xa0 <WriteIns>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     312:	8f ec       	ldi	r24, 0xCF	; 207
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Clear+0xa>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_Clear+0x10>
     31c:	00 00       	nop
     31e:	08 95       	ret

00000320 <RGB_SelectColor>:
		flag1=1;
	}
	OCR0=Red;     
	OCR1A=Green; 
	OCR1B=Blue; 
}
     320:	cf 93       	push	r28
     322:	c8 2f       	mov	r28, r24
     324:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
     328:	81 11       	cpse	r24, r1
     32a:	18 c0       	rjmp	.+48     	; 0x35c <RGB_SelectColor+0x3c>
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_Init>
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	85 e0       	ldi	r24, 0x05	; 5
     338:	0e 94 23 05 	call	0xa46	; 0xa46 <Timer1_Init>
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <TIMER0_OC0Mode>
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Timer1_OCRA1Mode>
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 b2 05 	call	0xb64	; 0xb64 <Timer1_OCRB1Mode>
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	97 bd       	out	0x27, r25	; 39
     354:	86 bd       	out	0x26, r24	; 38
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
     35c:	8c 2f       	mov	r24, r28
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	fc 01       	movw	r30, r24
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	e8 0f       	add	r30, r24
     368:	f9 1f       	adc	r31, r25
     36a:	ee 59       	subi	r30, 0x9E	; 158
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	80 81       	ld	r24, Z
     370:	8c bf       	out	0x3c, r24	; 60
     372:	81 81       	ldd	r24, Z+1	; 0x01
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9b bd       	out	0x2b, r25	; 43
     378:	8a bd       	out	0x2a, r24	; 42
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	99 bd       	out	0x29, r25	; 41
     380:	88 bd       	out	0x28, r24	; 40
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <Leds_On>:

/*Data=1,2,3 */
void Leds_On(u8 Data)
{
     386:	cf 93       	push	r28
     388:	c8 2f       	mov	r28, r24
	if(Data==1)
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	21 f4       	brne	.+8      	; 0x396 <Leds_On+0x10>
	{
		DIO_WritePin(PINC0,HIGH);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	80 e1       	ldi	r24, 0x10	; 16
     392:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
	if(Data==2)
     396:	c2 30       	cpi	r28, 0x02	; 2
     398:	21 f4       	brne	.+8      	; 0x3a2 <Leds_On+0x1c>
	{
		DIO_WritePin(PINC1,HIGH);
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	81 e1       	ldi	r24, 0x11	; 17
     39e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
	if(Data==3)
     3a2:	c3 30       	cpi	r28, 0x03	; 3
     3a4:	41 f4       	brne	.+16     	; 0x3b6 <Leds_On+0x30>
	{
		DIO_WritePin(PINC1,HIGH);
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	81 e1       	ldi	r24, 0x11	; 17
     3aa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
		DIO_WritePin(PINC0,HIGH);
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
}
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <Leds_Off>:

  /*Data=1,2,3 */
void Leds_Off(u8 Data)
{
     3ba:	cf 93       	push	r28
     3bc:	c8 2f       	mov	r28, r24
	if(Data==1)
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	21 f4       	brne	.+8      	; 0x3ca <Leds_Off+0x10>
	{
		DIO_WritePin(PINC0,LOW);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	80 e1       	ldi	r24, 0x10	; 16
     3c6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
	if(Data==2)
     3ca:	c2 30       	cpi	r28, 0x02	; 2
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <Leds_Off+0x1c>
	{
		DIO_WritePin(PINC1,LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	81 e1       	ldi	r24, 0x11	; 17
     3d2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
	if(Data==3)
     3d6:	c3 30       	cpi	r28, 0x03	; 3
     3d8:	41 f4       	brne	.+16     	; 0x3ea <Leds_Off+0x30>
	{
		DIO_WritePin(PINC1,LOW);
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	81 e1       	ldi	r24, 0x11	; 17
     3de:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
		DIO_WritePin(PINC0,LOW);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_WritePin>
	}
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <Servo_Init>:
#include "TIMERS.h"


void Servo_Init(void)
{
	Timer1_Init( TIMER1_FASTPWM_OCRA_TOP_MODE,TIMER1_SCALER_8);
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	0e 94 23 05 	call	0xa46	; 0xa46 <Timer1_Init>
	Timer1_OCRB1Mode(OCRB_NON_INVERTING);
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 b2 05 	call	0xb64	; 0xb64 <Timer1_OCRB1Mode>
	OCR1A=19999;
     3fc:	8f e1       	ldi	r24, 0x1F	; 31
     3fe:	9e e4       	ldi	r25, 0x4E	; 78
     400:	9b bd       	out	0x2b, r25	; 43
     402:	8a bd       	out	0x2a, r24	; 42
     404:	08 95       	ret

00000406 <Servo_SetAngle>:
}

void Servo_SetAngle(u8 angle)
{
	OCR1B=(angle*(u32)1000)/180;
     406:	28 2f       	mov	r18, r24
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	a8 ee       	ldi	r26, 0xE8	; 232
     40c:	b3 e0       	ldi	r27, 0x03	; 3
     40e:	0e 94 14 09 	call	0x1228	; 0x1228 <__umulhisi3>
     412:	24 eb       	ldi	r18, 0xB4	; 180
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	0e 94 cd 08 	call	0x119a	; 0x119a <__udivmodsi4>
     41e:	39 bd       	out	0x29, r19	; 41
     420:	28 bd       	out	0x28, r18	; 40
	OCR1B+=999;
     422:	88 b5       	in	r24, 0x28	; 40
     424:	99 b5       	in	r25, 0x29	; 41
     426:	89 51       	subi	r24, 0x19	; 25
     428:	9c 4f       	sbci	r25, 0xFC	; 252
     42a:	99 bd       	out	0x29, r25	; 41
     42c:	88 bd       	out	0x28, r24	; 40
     42e:	08 95       	ret

00000430 <main>:
#include <util/delay.h>



int main(void)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	65 97       	sbiw	r28, 0x15	; 21
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
    
    DIO_Init();
     444:	0e 94 f7 03 	call	0x7ee	; 0x7ee <DIO_Init>
    LCD_Init();
     448:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Init>
    ADC_Init();
     44c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ADC_Init>
    UART_Init();
     450:	0e 94 a3 06 	call	0xd46	; 0xd46 <UART_Init>
    Servo_Init();
     454:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Servo_Init>
    sei();
     458:	78 94       	sei
    UART_Service_Init();
     45a:	0e 94 83 07 	call	0xf06	; 0xf06 <UART_Service_Init>

    u8 str[20]={0};
     45e:	fe 01       	movw	r30, r28
     460:	31 96       	adiw	r30, 0x01	; 1
     462:	84 e1       	ldi	r24, 0x14	; 20
     464:	df 01       	movw	r26, r30
     466:	1d 92       	st	X+, r1
     468:	8a 95       	dec	r24
     46a:	e9 f7       	brne	.-6      	; 0x466 <main+0x36>
    u8 data;
    s8 r;
    while(1)
    {
	    UART_ReceiveStringAsynch(str);
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	0e 94 17 08 	call	0x102e	; 0x102e <UART_ReceiveStringAsynch>
	    if(Finish_Flag==1)
     474:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Finish_Flag>
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	c1 f7       	brne	.-16     	; 0x46c <main+0x3c>
	    {
		    UART_ReceiveTaskAndData(str,&data);
     47c:	be 01       	movw	r22, r28
     47e:	6b 5e       	subi	r22, 0xEB	; 235
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 90 07 	call	0xf20	; 0xf20 <UART_ReceiveTaskAndData>
		    r=UART_Find_Task(str,data);
     48a:	6d 89       	ldd	r22, Y+21	; 0x15
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 af 07 	call	0xf5e	; 0xf5e <UART_Find_Task>
     494:	18 2f       	mov	r17, r24
		    Finish_Flag=0;
     496:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <Finish_Flag>
		    LCD_Clear();
     49a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Clear>
		    if(r==WRONG_DATA)
     49e:	1f 3f       	cpi	r17, 0xFF	; 255
     4a0:	29 f4       	brne	.+10     	; 0x4ac <main+0x7c>
		    {
			    LCD_WriteString("wrong task");
     4a2:	88 e3       	ldi	r24, 0x38	; 56
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_WriteString>
     4aa:	e0 cf       	rjmp	.-64     	; 0x46c <main+0x3c>
		    }
		    else
		    {
			    LCD_WriteString("TASK OK");
     4ac:	83 e4       	ldi	r24, 0x43	; 67
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_WriteString>
     4b4:	db cf       	rjmp	.-74     	; 0x46c <main+0x3c>

000004b6 <ADC_Init>:


void ADC_Init(void)
{
	/* Vref*/
	switch(Vref)
     4b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	59 f0       	breq	.+22     	; 0x4d4 <ADC_Init+0x1e>
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <ADC_Init+0x10>
     4c0:	82 30       	cpi	r24, 0x02	; 2
     4c2:	79 f0       	breq	.+30     	; 0x4e2 <ADC_Init+0x2c>
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <ADC_Init+0x38>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
     4c6:	87 b1       	in	r24, 0x07	; 7
     4c8:	8f 7b       	andi	r24, 0xBF	; 191
     4ca:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
     4cc:	87 b1       	in	r24, 0x07	; 7
     4ce:	8f 77       	andi	r24, 0x7F	; 127
     4d0:	87 b9       	out	0x07, r24	; 7
		break;
     4d2:	0d c0       	rjmp	.+26     	; 0x4ee <ADC_Init+0x38>
		case VREF_VCC:
		SET_BIT(ADMUX,REFS0);
     4d4:	87 b1       	in	r24, 0x07	; 7
     4d6:	80 64       	ori	r24, 0x40	; 64
     4d8:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
     4da:	87 b1       	in	r24, 0x07	; 7
     4dc:	8f 77       	andi	r24, 0x7F	; 127
     4de:	87 b9       	out	0x07, r24	; 7
		break;
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <ADC_Init+0x38>
		case VREF_256:
		SET_BIT(ADMUX,REFS0);
     4e2:	87 b1       	in	r24, 0x07	; 7
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1);
     4e8:	87 b1       	in	r24, 0x07	; 7
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	/*prescaler*/
	ADCSRA=ADCSRA&0xf8;//0b11111000
     4ee:	86 b1       	in	r24, 0x06	; 6
     4f0:	88 7f       	andi	r24, 0xF8	; 248
     4f2:	86 b9       	out	0x06, r24	; 6
	ADCSRA=ADCSRA|(Scaler);
     4f4:	96 b1       	in	r25, 0x06	; 6
     4f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Scaler>
     4fa:	89 2b       	or	r24, r25
     4fc:	86 b9       	out	0x06, r24	; 6
	/*pins*/
	/*enable ADC*/
	SET_BIT(ADCSRA,ADEN);
     4fe:	86 b1       	in	r24, 0x06	; 6
     500:	80 68       	ori	r24, 0x80	; 128
     502:	86 b9       	out	0x06, r24	; 6
     504:	08 95       	ret

00000506 <DIO_InitPin>:
	if(port==PD)
	{
		data=PORTD;
	}
	return data;
}
     506:	98 2f       	mov	r25, r24
     508:	97 70       	andi	r25, 0x07	; 7
     50a:	61 11       	cpse	r22, r1
     50c:	4e c0       	rjmp	.+156    	; 0x5aa <DIO_InitPin+0xa4>
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	80 f4       	brcc	.+32     	; 0x532 <DIO_InitPin+0x2c>
     512:	4a b3       	in	r20, 0x1a	; 26
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	09 2e       	mov	r0, r25
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_InitPin+0x1a>
     51c:	22 0f       	add	r18, r18
     51e:	33 1f       	adc	r19, r19
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_InitPin+0x16>
     524:	34 2f       	mov	r19, r20
     526:	32 2b       	or	r19, r18
     528:	3a bb       	out	0x1a, r19	; 26
     52a:	3b b3       	in	r19, 0x1b	; 27
     52c:	20 95       	com	r18
     52e:	23 23       	and	r18, r19
     530:	2b bb       	out	0x1b, r18	; 27
     532:	28 ef       	ldi	r18, 0xF8	; 248
     534:	28 0f       	add	r18, r24
     536:	28 30       	cpi	r18, 0x08	; 8
     538:	80 f4       	brcc	.+32     	; 0x55a <DIO_InitPin+0x54>
     53a:	47 b3       	in	r20, 0x17	; 23
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	09 2e       	mov	r0, r25
     542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_InitPin+0x42>
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	0a 94       	dec	r0
     54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_InitPin+0x3e>
     54c:	34 2f       	mov	r19, r20
     54e:	32 2b       	or	r19, r18
     550:	37 bb       	out	0x17, r19	; 23
     552:	38 b3       	in	r19, 0x18	; 24
     554:	20 95       	com	r18
     556:	23 23       	and	r18, r19
     558:	28 bb       	out	0x18, r18	; 24
     55a:	20 ef       	ldi	r18, 0xF0	; 240
     55c:	28 0f       	add	r18, r24
     55e:	28 30       	cpi	r18, 0x08	; 8
     560:	80 f4       	brcc	.+32     	; 0x582 <DIO_InitPin+0x7c>
     562:	44 b3       	in	r20, 0x14	; 20
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	09 2e       	mov	r0, r25
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_InitPin+0x6a>
     56c:	22 0f       	add	r18, r18
     56e:	33 1f       	adc	r19, r19
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_InitPin+0x66>
     574:	34 2f       	mov	r19, r20
     576:	32 2b       	or	r19, r18
     578:	34 bb       	out	0x14, r19	; 20
     57a:	35 b3       	in	r19, 0x15	; 21
     57c:	20 95       	com	r18
     57e:	23 23       	and	r18, r19
     580:	25 bb       	out	0x15, r18	; 21
     582:	28 ee       	ldi	r18, 0xE8	; 232
     584:	28 0f       	add	r18, r24
     586:	28 30       	cpi	r18, 0x08	; 8
     588:	80 f4       	brcc	.+32     	; 0x5aa <DIO_InitPin+0xa4>
     58a:	41 b3       	in	r20, 0x11	; 17
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	09 2e       	mov	r0, r25
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_InitPin+0x92>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	0a 94       	dec	r0
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_InitPin+0x8e>
     59c:	34 2f       	mov	r19, r20
     59e:	32 2b       	or	r19, r18
     5a0:	31 bb       	out	0x11, r19	; 17
     5a2:	32 b3       	in	r19, 0x12	; 18
     5a4:	20 95       	com	r18
     5a6:	23 23       	and	r18, r19
     5a8:	22 bb       	out	0x12, r18	; 18
     5aa:	61 30       	cpi	r22, 0x01	; 1
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <DIO_InitPin+0xaa>
     5ae:	4e c0       	rjmp	.+156    	; 0x64c <DIO_InitPin+0x146>
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	80 f4       	brcc	.+32     	; 0x5d4 <DIO_InitPin+0xce>
     5b4:	4a b3       	in	r20, 0x1a	; 26
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	09 2e       	mov	r0, r25
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_InitPin+0xbc>
     5be:	22 0f       	add	r18, r18
     5c0:	33 1f       	adc	r19, r19
     5c2:	0a 94       	dec	r0
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_InitPin+0xb8>
     5c6:	20 95       	com	r18
     5c8:	34 2f       	mov	r19, r20
     5ca:	32 23       	and	r19, r18
     5cc:	3a bb       	out	0x1a, r19	; 26
     5ce:	3b b3       	in	r19, 0x1b	; 27
     5d0:	23 23       	and	r18, r19
     5d2:	2b bb       	out	0x1b, r18	; 27
     5d4:	28 ef       	ldi	r18, 0xF8	; 248
     5d6:	28 0f       	add	r18, r24
     5d8:	28 30       	cpi	r18, 0x08	; 8
     5da:	80 f4       	brcc	.+32     	; 0x5fc <DIO_InitPin+0xf6>
     5dc:	47 b3       	in	r20, 0x17	; 23
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	09 2e       	mov	r0, r25
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_InitPin+0xe4>
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_InitPin+0xe0>
     5ee:	20 95       	com	r18
     5f0:	34 2f       	mov	r19, r20
     5f2:	32 23       	and	r19, r18
     5f4:	37 bb       	out	0x17, r19	; 23
     5f6:	38 b3       	in	r19, 0x18	; 24
     5f8:	23 23       	and	r18, r19
     5fa:	28 bb       	out	0x18, r18	; 24
     5fc:	20 ef       	ldi	r18, 0xF0	; 240
     5fe:	28 0f       	add	r18, r24
     600:	28 30       	cpi	r18, 0x08	; 8
     602:	80 f4       	brcc	.+32     	; 0x624 <DIO_InitPin+0x11e>
     604:	44 b3       	in	r20, 0x14	; 20
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	09 2e       	mov	r0, r25
     60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_InitPin+0x10c>
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_InitPin+0x108>
     616:	20 95       	com	r18
     618:	34 2f       	mov	r19, r20
     61a:	32 23       	and	r19, r18
     61c:	34 bb       	out	0x14, r19	; 20
     61e:	35 b3       	in	r19, 0x15	; 21
     620:	23 23       	and	r18, r19
     622:	25 bb       	out	0x15, r18	; 21
     624:	28 ee       	ldi	r18, 0xE8	; 232
     626:	28 0f       	add	r18, r24
     628:	28 30       	cpi	r18, 0x08	; 8
     62a:	80 f4       	brcc	.+32     	; 0x64c <DIO_InitPin+0x146>
     62c:	41 b3       	in	r20, 0x11	; 17
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	09 2e       	mov	r0, r25
     634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_InitPin+0x134>
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	0a 94       	dec	r0
     63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_InitPin+0x130>
     63e:	20 95       	com	r18
     640:	34 2f       	mov	r19, r20
     642:	32 23       	and	r19, r18
     644:	31 bb       	out	0x11, r19	; 17
     646:	32 b3       	in	r19, 0x12	; 18
     648:	23 23       	and	r18, r19
     64a:	22 bb       	out	0x12, r18	; 18
     64c:	62 30       	cpi	r22, 0x02	; 2
     64e:	09 f0       	breq	.+2      	; 0x652 <DIO_InitPin+0x14c>
     650:	4e c0       	rjmp	.+156    	; 0x6ee <DIO_InitPin+0x1e8>
     652:	88 30       	cpi	r24, 0x08	; 8
     654:	80 f4       	brcc	.+32     	; 0x676 <DIO_InitPin+0x170>
     656:	4a b3       	in	r20, 0x1a	; 26
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	09 2e       	mov	r0, r25
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_InitPin+0x15e>
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_InitPin+0x15a>
     668:	32 2f       	mov	r19, r18
     66a:	30 95       	com	r19
     66c:	34 23       	and	r19, r20
     66e:	3a bb       	out	0x1a, r19	; 26
     670:	3b b3       	in	r19, 0x1b	; 27
     672:	23 2b       	or	r18, r19
     674:	2b bb       	out	0x1b, r18	; 27
     676:	28 ef       	ldi	r18, 0xF8	; 248
     678:	28 0f       	add	r18, r24
     67a:	28 30       	cpi	r18, 0x08	; 8
     67c:	80 f4       	brcc	.+32     	; 0x69e <DIO_InitPin+0x198>
     67e:	47 b3       	in	r20, 0x17	; 23
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	09 2e       	mov	r0, r25
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_InitPin+0x186>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_InitPin+0x182>
     690:	32 2f       	mov	r19, r18
     692:	30 95       	com	r19
     694:	34 23       	and	r19, r20
     696:	37 bb       	out	0x17, r19	; 23
     698:	38 b3       	in	r19, 0x18	; 24
     69a:	23 2b       	or	r18, r19
     69c:	28 bb       	out	0x18, r18	; 24
     69e:	20 ef       	ldi	r18, 0xF0	; 240
     6a0:	28 0f       	add	r18, r24
     6a2:	28 30       	cpi	r18, 0x08	; 8
     6a4:	80 f4       	brcc	.+32     	; 0x6c6 <DIO_InitPin+0x1c0>
     6a6:	44 b3       	in	r20, 0x14	; 20
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	09 2e       	mov	r0, r25
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_InitPin+0x1ae>
     6b0:	22 0f       	add	r18, r18
     6b2:	33 1f       	adc	r19, r19
     6b4:	0a 94       	dec	r0
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_InitPin+0x1aa>
     6b8:	32 2f       	mov	r19, r18
     6ba:	30 95       	com	r19
     6bc:	34 23       	and	r19, r20
     6be:	34 bb       	out	0x14, r19	; 20
     6c0:	35 b3       	in	r19, 0x15	; 21
     6c2:	23 2b       	or	r18, r19
     6c4:	25 bb       	out	0x15, r18	; 21
     6c6:	88 51       	subi	r24, 0x18	; 24
     6c8:	88 30       	cpi	r24, 0x08	; 8
     6ca:	88 f4       	brcc	.+34     	; 0x6ee <DIO_InitPin+0x1e8>
     6cc:	41 b3       	in	r20, 0x11	; 17
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_InitPin+0x1d4>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	9a 95       	dec	r25
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_InitPin+0x1d0>
     6de:	cb 01       	movw	r24, r22
     6e0:	96 2f       	mov	r25, r22
     6e2:	90 95       	com	r25
     6e4:	94 23       	and	r25, r20
     6e6:	91 bb       	out	0x11, r25	; 17
     6e8:	92 b3       	in	r25, 0x12	; 18
     6ea:	89 2b       	or	r24, r25
     6ec:	82 bb       	out	0x12, r24	; 18
     6ee:	08 95       	ret

000006f0 <DIO_WritePin>:
     6f0:	98 2f       	mov	r25, r24
     6f2:	97 70       	andi	r25, 0x07	; 7
     6f4:	61 11       	cpse	r22, r1
     6f6:	3e c0       	rjmp	.+124    	; 0x774 <DIO_WritePin+0x84>
     6f8:	88 30       	cpi	r24, 0x08	; 8
     6fa:	60 f4       	brcc	.+24     	; 0x714 <DIO_WritePin+0x24>
     6fc:	4b b3       	in	r20, 0x1b	; 27
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	09 2e       	mov	r0, r25
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_WritePin+0x1a>
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_WritePin+0x16>
     70e:	20 95       	com	r18
     710:	24 23       	and	r18, r20
     712:	2b bb       	out	0x1b, r18	; 27
     714:	28 ef       	ldi	r18, 0xF8	; 248
     716:	28 0f       	add	r18, r24
     718:	28 30       	cpi	r18, 0x08	; 8
     71a:	60 f4       	brcc	.+24     	; 0x734 <DIO_WritePin+0x44>
     71c:	48 b3       	in	r20, 0x18	; 24
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	09 2e       	mov	r0, r25
     724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_WritePin+0x3a>
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	0a 94       	dec	r0
     72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_WritePin+0x36>
     72e:	20 95       	com	r18
     730:	24 23       	and	r18, r20
     732:	28 bb       	out	0x18, r18	; 24
     734:	20 ef       	ldi	r18, 0xF0	; 240
     736:	28 0f       	add	r18, r24
     738:	28 30       	cpi	r18, 0x08	; 8
     73a:	60 f4       	brcc	.+24     	; 0x754 <DIO_WritePin+0x64>
     73c:	45 b3       	in	r20, 0x15	; 21
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	09 2e       	mov	r0, r25
     744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_WritePin+0x5a>
     746:	22 0f       	add	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	0a 94       	dec	r0
     74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_WritePin+0x56>
     74e:	20 95       	com	r18
     750:	24 23       	and	r18, r20
     752:	25 bb       	out	0x15, r18	; 21
     754:	28 ee       	ldi	r18, 0xE8	; 232
     756:	28 0f       	add	r18, r24
     758:	28 30       	cpi	r18, 0x08	; 8
     75a:	60 f4       	brcc	.+24     	; 0x774 <DIO_WritePin+0x84>
     75c:	42 b3       	in	r20, 0x12	; 18
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	09 2e       	mov	r0, r25
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_WritePin+0x7a>
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	0a 94       	dec	r0
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_WritePin+0x76>
     76e:	20 95       	com	r18
     770:	24 23       	and	r18, r20
     772:	22 bb       	out	0x12, r18	; 18
     774:	61 30       	cpi	r22, 0x01	; 1
     776:	d1 f5       	brne	.+116    	; 0x7ec <DIO_WritePin+0xfc>
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	58 f4       	brcc	.+22     	; 0x792 <DIO_WritePin+0xa2>
     77c:	4b b3       	in	r20, 0x1b	; 27
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	09 2e       	mov	r0, r25
     784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_WritePin+0x9a>
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	0a 94       	dec	r0
     78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_WritePin+0x96>
     78e:	24 2b       	or	r18, r20
     790:	2b bb       	out	0x1b, r18	; 27
     792:	28 ef       	ldi	r18, 0xF8	; 248
     794:	28 0f       	add	r18, r24
     796:	28 30       	cpi	r18, 0x08	; 8
     798:	58 f4       	brcc	.+22     	; 0x7b0 <DIO_WritePin+0xc0>
     79a:	48 b3       	in	r20, 0x18	; 24
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	09 2e       	mov	r0, r25
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_WritePin+0xb8>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_WritePin+0xb4>
     7ac:	24 2b       	or	r18, r20
     7ae:	28 bb       	out	0x18, r18	; 24
     7b0:	20 ef       	ldi	r18, 0xF0	; 240
     7b2:	28 0f       	add	r18, r24
     7b4:	28 30       	cpi	r18, 0x08	; 8
     7b6:	58 f4       	brcc	.+22     	; 0x7ce <DIO_WritePin+0xde>
     7b8:	45 b3       	in	r20, 0x15	; 21
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	09 2e       	mov	r0, r25
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_WritePin+0xd6>
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_WritePin+0xd2>
     7ca:	24 2b       	or	r18, r20
     7cc:	25 bb       	out	0x15, r18	; 21
     7ce:	88 51       	subi	r24, 0x18	; 24
     7d0:	88 30       	cpi	r24, 0x08	; 8
     7d2:	60 f4       	brcc	.+24     	; 0x7ec <DIO_WritePin+0xfc>
     7d4:	42 b3       	in	r20, 0x12	; 18
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	b9 01       	movw	r22, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_WritePin+0xf2>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	9a 95       	dec	r25
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_WritePin+0xee>
     7e6:	cb 01       	movw	r24, r22
     7e8:	84 2b       	or	r24, r20
     7ea:	82 bb       	out	0x12, r24	; 18
     7ec:	08 95       	ret

000007ee <DIO_Init>:


void DIO_Init(void)
{
     7ee:	cf 93       	push	r28
	DIO_Pin_t i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	09 c0       	rjmp	.+18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		DIO_InitPin(i,PinStatusArr[i]);
     7f4:	ec 2f       	mov	r30, r28
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	e8 5e       	subi	r30, 0xE8	; 232
     7fa:	fe 4f       	sbci	r31, 0xFE	; 254
     7fc:	60 81       	ld	r22, Z
     7fe:	8c 2f       	mov	r24, r28
     800:	0e 94 83 02 	call	0x506	; 0x506 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_t i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     804:	cf 5f       	subi	r28, 0xFF	; 255
     806:	c0 32       	cpi	r28, 0x20	; 32
     808:	a8 f3       	brcs	.-22     	; 0x7f4 <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinStatusArr[i]);
	}
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <__vector_17>:
	eeprom_ready = localFptr;
}


ISR(EE_RDY_vect)
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
	if (eeprom_ready != Nullptr)
     830:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <eeprom_ready>
     834:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <eeprom_ready+0x1>
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	09 f0       	breq	.+2      	; 0x83e <__vector_17+0x30>
	{
		eeprom_ready();
     83c:	09 95       	icall
	}
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	bf 91       	pop	r27
     844:	af 91       	pop	r26
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	7f 91       	pop	r23
     84c:	6f 91       	pop	r22
     84e:	5f 91       	pop	r21
     850:	4f 91       	pop	r20
     852:	3f 91       	pop	r19
     854:	2f 91       	pop	r18
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	2f 93       	push	r18
     86c:	3f 93       	push	r19
     86e:	4f 93       	push	r20
     870:	5f 93       	push	r21
     872:	6f 93       	push	r22
     874:	7f 93       	push	r23
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	af 93       	push	r26
     87c:	bf 93       	push	r27
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
	if (INT0_Fptr!=Nullptr)
     882:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <INT0_Fptr>
     886:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <INT0_Fptr+0x1>
     88a:	30 97       	sbiw	r30, 0x00	; 0
     88c:	09 f0       	breq	.+2      	; 0x890 <__vector_1+0x30>
	{
		INT0_Fptr();
     88e:	09 95       	icall
	}
	
}
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	bf 91       	pop	r27
     896:	af 91       	pop	r26
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	7f 91       	pop	r23
     89e:	6f 91       	pop	r22
     8a0:	5f 91       	pop	r21
     8a2:	4f 91       	pop	r20
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <__vector_2>:
ISR(INT1_vect,ISR_NOBLOCK)
{
     8b2:	78 94       	sei
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	0f 92       	push	r0
     8bc:	11 24       	eor	r1, r1
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	if (INT1_Fptr!=Nullptr) 	
     8d6:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <INT1_Fptr>
     8da:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <INT1_Fptr+0x1>
     8de:	30 97       	sbiw	r30, 0x00	; 0
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__vector_2+0x32>
	{
    	INT1_Fptr();
     8e2:	09 95       	icall
	}
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_3>:
ISR(INT2_vect)
{
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
	if (INT2_Fptr!=Nullptr)
     928:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <INT2_Fptr>
     92c:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <INT2_Fptr+0x1>
     930:	30 97       	sbiw	r30, 0x00	; 0
     932:	09 f0       	breq	.+2      	; 0x936 <__vector_3+0x30>
	{
		INT2_Fptr();
     934:	09 95       	icall
	}
	
}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_12>:
	PF=LocalFptr;
}


ISR (SPI_STC_vect)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	if(PF!=Nullptr)
     97a:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <PF>
     97e:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <PF+0x1>
     982:	30 97       	sbiw	r30, 0x00	; 0
     984:	09 f0       	breq	.+2      	; 0x988 <__vector_12+0x30>
	{
		PF();
     986:	09 95       	icall
	}
}
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <TIMER0_Init>:
{
	Timer1_OCB_Fptr=LocalFptr;
}
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer1_ICU_Fptr=LocalFptr;
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	69 f0       	breq	.+26     	; 0x9c8 <TIMER0_Init+0x1e>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <TIMER0_Init+0x10>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	89 f0       	breq	.+34     	; 0x9d6 <TIMER0_Init+0x2c>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	b1 f0       	breq	.+44     	; 0x9e4 <TIMER0_Init+0x3a>
     9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <TIMER0_Init+0x46>
     9ba:	83 b7       	in	r24, 0x33	; 51
     9bc:	8f 7b       	andi	r24, 0xBF	; 191
     9be:	83 bf       	out	0x33, r24	; 51
     9c0:	83 b7       	in	r24, 0x33	; 51
     9c2:	87 7f       	andi	r24, 0xF7	; 247
     9c4:	83 bf       	out	0x33, r24	; 51
     9c6:	14 c0       	rjmp	.+40     	; 0x9f0 <TIMER0_Init+0x46>
     9c8:	83 b7       	in	r24, 0x33	; 51
     9ca:	80 64       	ori	r24, 0x40	; 64
     9cc:	83 bf       	out	0x33, r24	; 51
     9ce:	83 b7       	in	r24, 0x33	; 51
     9d0:	87 7f       	andi	r24, 0xF7	; 247
     9d2:	83 bf       	out	0x33, r24	; 51
     9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <TIMER0_Init+0x46>
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	8f 7b       	andi	r24, 0xBF	; 191
     9da:	83 bf       	out	0x33, r24	; 51
     9dc:	83 b7       	in	r24, 0x33	; 51
     9de:	88 60       	ori	r24, 0x08	; 8
     9e0:	83 bf       	out	0x33, r24	; 51
     9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <TIMER0_Init+0x46>
     9e4:	83 b7       	in	r24, 0x33	; 51
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	83 bf       	out	0x33, r24	; 51
     9ea:	83 b7       	in	r24, 0x33	; 51
     9ec:	88 60       	ori	r24, 0x08	; 8
     9ee:	83 bf       	out	0x33, r24	; 51
     9f0:	83 b7       	in	r24, 0x33	; 51
     9f2:	88 7f       	andi	r24, 0xF8	; 248
     9f4:	83 bf       	out	0x33, r24	; 51
     9f6:	83 b7       	in	r24, 0x33	; 51
     9f8:	68 2b       	or	r22, r24
     9fa:	63 bf       	out	0x33, r22	; 51
     9fc:	08 95       	ret

000009fe <TIMER0_OC0Mode>:
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	69 f0       	breq	.+26     	; 0xa1c <TIMER0_OC0Mode+0x1e>
     a02:	28 f0       	brcs	.+10     	; 0xa0e <TIMER0_OC0Mode+0x10>
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	89 f0       	breq	.+34     	; 0xa2a <TIMER0_OC0Mode+0x2c>
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	b1 f0       	breq	.+44     	; 0xa38 <TIMER0_OC0Mode+0x3a>
     a0c:	08 95       	ret
     a0e:	83 b7       	in	r24, 0x33	; 51
     a10:	8f 7e       	andi	r24, 0xEF	; 239
     a12:	83 bf       	out	0x33, r24	; 51
     a14:	83 b7       	in	r24, 0x33	; 51
     a16:	8f 7d       	andi	r24, 0xDF	; 223
     a18:	83 bf       	out	0x33, r24	; 51
     a1a:	08 95       	ret
     a1c:	83 b7       	in	r24, 0x33	; 51
     a1e:	80 61       	ori	r24, 0x10	; 16
     a20:	83 bf       	out	0x33, r24	; 51
     a22:	83 b7       	in	r24, 0x33	; 51
     a24:	8f 7d       	andi	r24, 0xDF	; 223
     a26:	83 bf       	out	0x33, r24	; 51
     a28:	08 95       	ret
     a2a:	83 b7       	in	r24, 0x33	; 51
     a2c:	8f 7e       	andi	r24, 0xEF	; 239
     a2e:	83 bf       	out	0x33, r24	; 51
     a30:	83 b7       	in	r24, 0x33	; 51
     a32:	80 62       	ori	r24, 0x20	; 32
     a34:	83 bf       	out	0x33, r24	; 51
     a36:	08 95       	ret
     a38:	83 b7       	in	r24, 0x33	; 51
     a3a:	80 61       	ori	r24, 0x10	; 16
     a3c:	83 bf       	out	0x33, r24	; 51
     a3e:	83 b7       	in	r24, 0x33	; 51
     a40:	80 62       	ori	r24, 0x20	; 32
     a42:	83 bf       	out	0x33, r24	; 51
     a44:	08 95       	ret

00000a46 <Timer1_Init>:
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	87 30       	cpi	r24, 0x07	; 7
     a4a:	91 05       	cpc	r25, r1
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <Timer1_Init+0xa>
     a4e:	5f c0       	rjmp	.+190    	; 0xb0e <Timer1_Init+0xc8>
     a50:	fc 01       	movw	r30, r24
     a52:	e6 5d       	subi	r30, 0xD6	; 214
     a54:	ff 4f       	sbci	r31, 0xFF	; 255
     a56:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__tablejump2__>
     a5a:	8f b5       	in	r24, 0x2f	; 47
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	8f bd       	out	0x2f, r24	; 47
     a60:	8f b5       	in	r24, 0x2f	; 47
     a62:	8d 7f       	andi	r24, 0xFD	; 253
     a64:	8f bd       	out	0x2f, r24	; 47
     a66:	8e b5       	in	r24, 0x2e	; 46
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	8e bd       	out	0x2e, r24	; 46
     a6c:	8e b5       	in	r24, 0x2e	; 46
     a6e:	8f 7e       	andi	r24, 0xEF	; 239
     a70:	8e bd       	out	0x2e, r24	; 46
     a72:	4d c0       	rjmp	.+154    	; 0xb0e <Timer1_Init+0xc8>
     a74:	8f b5       	in	r24, 0x2f	; 47
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	8f bd       	out	0x2f, r24	; 47
     a7a:	8f b5       	in	r24, 0x2f	; 47
     a7c:	8d 7f       	andi	r24, 0xFD	; 253
     a7e:	8f bd       	out	0x2f, r24	; 47
     a80:	8e b5       	in	r24, 0x2e	; 46
     a82:	88 60       	ori	r24, 0x08	; 8
     a84:	8e bd       	out	0x2e, r24	; 46
     a86:	8e b5       	in	r24, 0x2e	; 46
     a88:	80 61       	ori	r24, 0x10	; 16
     a8a:	8e bd       	out	0x2e, r24	; 46
     a8c:	40 c0       	rjmp	.+128    	; 0xb0e <Timer1_Init+0xc8>
     a8e:	8f b5       	in	r24, 0x2f	; 47
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	8f bd       	out	0x2f, r24	; 47
     a94:	8f b5       	in	r24, 0x2f	; 47
     a96:	8d 7f       	andi	r24, 0xFD	; 253
     a98:	8f bd       	out	0x2f, r24	; 47
     a9a:	8e b5       	in	r24, 0x2e	; 46
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	8e bd       	out	0x2e, r24	; 46
     aa0:	8e b5       	in	r24, 0x2e	; 46
     aa2:	8f 7e       	andi	r24, 0xEF	; 239
     aa4:	8e bd       	out	0x2e, r24	; 46
     aa6:	33 c0       	rjmp	.+102    	; 0xb0e <Timer1_Init+0xc8>
     aa8:	8f b5       	in	r24, 0x2f	; 47
     aaa:	8e 7f       	andi	r24, 0xFE	; 254
     aac:	8f bd       	out	0x2f, r24	; 47
     aae:	8f b5       	in	r24, 0x2f	; 47
     ab0:	8d 7f       	andi	r24, 0xFD	; 253
     ab2:	8f bd       	out	0x2f, r24	; 47
     ab4:	8e b5       	in	r24, 0x2e	; 46
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	8e bd       	out	0x2e, r24	; 46
     aba:	8e b5       	in	r24, 0x2e	; 46
     abc:	80 61       	ori	r24, 0x10	; 16
     abe:	8e bd       	out	0x2e, r24	; 46
     ac0:	26 c0       	rjmp	.+76     	; 0xb0e <Timer1_Init+0xc8>
     ac2:	8f b5       	in	r24, 0x2f	; 47
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	8f bd       	out	0x2f, r24	; 47
     ac8:	8f b5       	in	r24, 0x2f	; 47
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	8f bd       	out	0x2f, r24	; 47
     ace:	8e b5       	in	r24, 0x2e	; 46
     ad0:	87 7f       	andi	r24, 0xF7	; 247
     ad2:	8e bd       	out	0x2e, r24	; 46
     ad4:	8e b5       	in	r24, 0x2e	; 46
     ad6:	80 61       	ori	r24, 0x10	; 16
     ad8:	8e bd       	out	0x2e, r24	; 46
     ada:	19 c0       	rjmp	.+50     	; 0xb0e <Timer1_Init+0xc8>
     adc:	8f b5       	in	r24, 0x2f	; 47
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	8f bd       	out	0x2f, r24	; 47
     ae2:	8f b5       	in	r24, 0x2f	; 47
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	8f bd       	out	0x2f, r24	; 47
     ae8:	8e b5       	in	r24, 0x2e	; 46
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	8e bd       	out	0x2e, r24	; 46
     aee:	8e b5       	in	r24, 0x2e	; 46
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	8e bd       	out	0x2e, r24	; 46
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <Timer1_Init+0xc8>
     af6:	8f b5       	in	r24, 0x2f	; 47
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	8f bd       	out	0x2f, r24	; 47
     afc:	8f b5       	in	r24, 0x2f	; 47
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	8f bd       	out	0x2f, r24	; 47
     b02:	8e b5       	in	r24, 0x2e	; 46
     b04:	88 60       	ori	r24, 0x08	; 8
     b06:	8e bd       	out	0x2e, r24	; 46
     b08:	8e b5       	in	r24, 0x2e	; 46
     b0a:	80 61       	ori	r24, 0x10	; 16
     b0c:	8e bd       	out	0x2e, r24	; 46
     b0e:	8e b5       	in	r24, 0x2e	; 46
     b10:	88 7f       	andi	r24, 0xF8	; 248
     b12:	8e bd       	out	0x2e, r24	; 46
     b14:	8e b5       	in	r24, 0x2e	; 46
     b16:	68 2b       	or	r22, r24
     b18:	6e bd       	out	0x2e, r22	; 46
     b1a:	08 95       	ret

00000b1c <Timer1_OCRA1Mode>:
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	69 f0       	breq	.+26     	; 0xb3a <Timer1_OCRA1Mode+0x1e>
     b20:	28 f0       	brcs	.+10     	; 0xb2c <Timer1_OCRA1Mode+0x10>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	89 f0       	breq	.+34     	; 0xb48 <Timer1_OCRA1Mode+0x2c>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	b1 f0       	breq	.+44     	; 0xb56 <Timer1_OCRA1Mode+0x3a>
     b2a:	08 95       	ret
     b2c:	8f b5       	in	r24, 0x2f	; 47
     b2e:	8f 7b       	andi	r24, 0xBF	; 191
     b30:	8f bd       	out	0x2f, r24	; 47
     b32:	8f b5       	in	r24, 0x2f	; 47
     b34:	8f 77       	andi	r24, 0x7F	; 127
     b36:	8f bd       	out	0x2f, r24	; 47
     b38:	08 95       	ret
     b3a:	8f b5       	in	r24, 0x2f	; 47
     b3c:	80 64       	ori	r24, 0x40	; 64
     b3e:	8f bd       	out	0x2f, r24	; 47
     b40:	8f b5       	in	r24, 0x2f	; 47
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	8f bd       	out	0x2f, r24	; 47
     b46:	08 95       	ret
     b48:	8f b5       	in	r24, 0x2f	; 47
     b4a:	8f 7b       	andi	r24, 0xBF	; 191
     b4c:	8f bd       	out	0x2f, r24	; 47
     b4e:	8f b5       	in	r24, 0x2f	; 47
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	8f bd       	out	0x2f, r24	; 47
     b54:	08 95       	ret
     b56:	8f b5       	in	r24, 0x2f	; 47
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8f bd       	out	0x2f, r24	; 47
     b5c:	8f b5       	in	r24, 0x2f	; 47
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	8f bd       	out	0x2f, r24	; 47
     b62:	08 95       	ret

00000b64 <Timer1_OCRB1Mode>:
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	69 f0       	breq	.+26     	; 0xb82 <Timer1_OCRB1Mode+0x1e>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <Timer1_OCRB1Mode+0x10>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	89 f0       	breq	.+34     	; 0xb90 <Timer1_OCRB1Mode+0x2c>
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	b1 f0       	breq	.+44     	; 0xb9e <Timer1_OCRB1Mode+0x3a>
     b72:	08 95       	ret
     b74:	8f b5       	in	r24, 0x2f	; 47
     b76:	8f 7e       	andi	r24, 0xEF	; 239
     b78:	8f bd       	out	0x2f, r24	; 47
     b7a:	8f b5       	in	r24, 0x2f	; 47
     b7c:	8f 7d       	andi	r24, 0xDF	; 223
     b7e:	8f bd       	out	0x2f, r24	; 47
     b80:	08 95       	ret
     b82:	8f b5       	in	r24, 0x2f	; 47
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	8f bd       	out	0x2f, r24	; 47
     b88:	8f b5       	in	r24, 0x2f	; 47
     b8a:	8f 7d       	andi	r24, 0xDF	; 223
     b8c:	8f bd       	out	0x2f, r24	; 47
     b8e:	08 95       	ret
     b90:	8f b5       	in	r24, 0x2f	; 47
     b92:	8f 7e       	andi	r24, 0xEF	; 239
     b94:	8f bd       	out	0x2f, r24	; 47
     b96:	8f b5       	in	r24, 0x2f	; 47
     b98:	80 62       	ori	r24, 0x20	; 32
     b9a:	8f bd       	out	0x2f, r24	; 47
     b9c:	08 95       	ret
     b9e:	8f b5       	in	r24, 0x2f	; 47
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	8f bd       	out	0x2f, r24	; 47
     ba4:	8f b5       	in	r24, 0x2f	; 47
     ba6:	80 62       	ori	r24, 0x20	; 32
     ba8:	8f bd       	out	0x2f, r24	; 47
     baa:	08 95       	ret

00000bac <__vector_11>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER0_OV_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
	if(Timer0_OVF_Fptr!=Nullptr)
     bce:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <Timer0_OVF_Fptr>
     bd2:	f0 91 78 01 	lds	r31, 0x0178	; 0x800178 <Timer0_OVF_Fptr+0x1>
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     bda:	09 95       	icall
	}
}
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=Nullptr)
     c20:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <Timer1_OVF_Fptr>
     c24:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <Timer1_OVF_Fptr+0x1>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
     c2c:	09 95       	icall
	}
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=Nullptr)
     c72:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <Timer1_OCA_Fptr>
     c76:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <Timer1_OCA_Fptr+0x1>
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	09 f0       	breq	.+2      	; 0xc80 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
     c7e:	09 95       	icall
	}
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=Nullptr)
     cc4:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <Timer1_OCB_Fptr>
     cc8:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <Timer1_OCB_Fptr+0x1>
     ccc:	30 97       	sbiw	r30, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
     cd0:	09 95       	icall
	}
}
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=Nullptr)
     d16:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <Timer1_ICU_Fptr>
     d1a:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <Timer1_ICU_Fptr+0x1>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
     d22:	09 95       	icall
	}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <UART_Init>:
	SET_BIT(UCSRB,TXCIE);
}

void UART_TX_InterruptDisable(void)
{
	CLR_BIT(UCSRB,TXCIE);
     d46:	83 e3       	ldi	r24, 0x33	; 51
     d48:	89 b9       	out	0x09, r24	; 9
     d4a:	8b b1       	in	r24, 0x0b	; 11
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	8b b9       	out	0x0b, r24	; 11
     d50:	8a b1       	in	r24, 0x0a	; 10
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8a b9       	out	0x0a, r24	; 10
     d56:	8a b1       	in	r24, 0x0a	; 10
     d58:	80 61       	ori	r24, 0x10	; 16
     d5a:	8a b9       	out	0x0a, r24	; 10
     d5c:	08 95       	ret

00000d5e <UART_SendNoBlock>:
     d5e:	8c b9       	out	0x0c, r24	; 12
     d60:	08 95       	ret

00000d62 <UART_ReceiveNoBlock>:
     d62:	8c b1       	in	r24, 0x0c	; 12
     d64:	08 95       	ret

00000d66 <UART_RX_InterruptEnable>:
     d66:	8a b1       	in	r24, 0x0a	; 10
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	8a b9       	out	0x0a, r24	; 10
     d6c:	08 95       	ret

00000d6e <UART_TX_InterruptEnable>:
     d6e:	8a b1       	in	r24, 0x0a	; 10
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	8a b9       	out	0x0a, r24	; 10
     d74:	08 95       	ret

00000d76 <UART_RX_SetCallBack>:
}

void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
	UART_RX_Fptr = LocalFptr;
     d76:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <UART_RX_Fptr+0x1>
     d7a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <UART_RX_Fptr>
     d7e:	08 95       	ret

00000d80 <UART_TX_SetCallBack>:
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
     d80:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <UART_TX_Fptr+0x1>
     d84:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <UART_TX_Fptr>
     d88:	08 95       	ret

00000d8a <__vector_13>:
}

ISR(UART_RX_vect)
{
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
	if (UART_RX_Fptr!=Nullptr)
     dac:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <UART_RX_Fptr>
     db0:	f0 91 7e 01 	lds	r31, 0x017E	; 0x80017e <UART_RX_Fptr+0x1>
     db4:	30 97       	sbiw	r30, 0x00	; 0
     db6:	09 f0       	breq	.+2      	; 0xdba <__vector_13+0x30>
	{
		UART_RX_Fptr();
     db8:	09 95       	icall
	}
}
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_15>:

ISR(UART_TX_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
	if (UART_TX_Fptr!=Nullptr)
     dfe:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <UART_TX_Fptr>
     e02:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <UART_TX_Fptr+0x1>
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	09 f0       	breq	.+2      	; 0xe0c <__vector_15+0x30>
	{
		UART_TX_Fptr();
     e0a:	09 95       	icall
	}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <RX_Func>:
	}
	SP++;
	
	if(SP==STACKSIZE)
	{
		SP=0;
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <i>
     e36:	d0 e0       	ldi	r29, 0x00	; 0
     e38:	0e 94 b1 06 	call	0xd62	; 0xd62 <UART_ReceiveNoBlock>
     e3c:	c0 55       	subi	r28, 0x50	; 80
     e3e:	dd 4f       	sbci	r29, 0xFD	; 253
     e40:	88 83       	st	Y, r24
     e42:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <i>
     e46:	e8 2f       	mov	r30, r24
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	e0 55       	subi	r30, 0x50	; 80
     e4c:	fd 4f       	sbci	r31, 0xFD	; 253
     e4e:	90 81       	ld	r25, Z
     e50:	9d 30       	cpi	r25, 0x0D	; 13
     e52:	21 f4       	brne	.+8      	; 0xe5c <RX_Func+0x2e>
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <StrCompleteFlag>
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <RX_Func+0x3e>
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <i>
     e62:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Flag>
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Flag>
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <TX_Func>:
     e72:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Sec_ElementFlag.1782>
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	39 f4       	brne	.+14     	; 0xe88 <TX_Func+0x16>
     e7a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <x.1781>
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <x.1781>
     e84:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <Sec_ElementFlag.1782>
     e88:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <Pop_index>
     e8c:	42 2f       	mov	r20, r18
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	fa 01       	movw	r30, r20
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	e0 53       	subi	r30, 0x30	; 48
     e98:	fd 4f       	sbci	r31, 0xFD	; 253
     e9a:	01 90       	ld	r0, Z+
     e9c:	f0 81       	ld	r31, Z
     e9e:	e0 2d       	mov	r30, r0
     ea0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <x.1781>
     ea4:	e8 0f       	add	r30, r24
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	88 23       	and	r24, r24
     eac:	41 f0       	breq	.+16     	; 0xebe <TX_Func+0x4c>
     eae:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_SendNoBlock>
     eb2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <x.1781>
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <x.1781>
     ebc:	08 95       	ret
     ebe:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <SP>
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	48 17       	cp	r20, r24
     ec8:	59 07       	cpc	r21, r25
     eca:	ac f4       	brge	.+42     	; 0xef6 <TX_Func+0x84>
     ecc:	2f 5f       	subi	r18, 0xFF	; 255
     ece:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <Pop_index>
     ed2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <x.1781>
     ed6:	e2 2f       	mov	r30, r18
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	e0 53       	subi	r30, 0x30	; 48
     ee0:	fd 4f       	sbci	r31, 0xFD	; 253
     ee2:	01 90       	ld	r0, Z+
     ee4:	f0 81       	ld	r31, Z
     ee6:	e0 2d       	mov	r30, r0
     ee8:	80 81       	ld	r24, Z
     eea:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_SendNoBlock>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <Sec_ElementFlag.1782>
     ef4:	08 95       	ret
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <x.1781>
     efc:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <Pop_index>
     f00:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <SP>
     f04:	08 95       	ret

00000f06 <UART_Service_Init>:
     f06:	89 e3       	ldi	r24, 0x39	; 57
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	0e 94 c0 06 	call	0xd80	; 0xd80 <UART_TX_SetCallBack>
     f0e:	87 e1       	ldi	r24, 0x17	; 23
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 bb 06 	call	0xd76	; 0xd76 <UART_RX_SetCallBack>
     f16:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_TX_InterruptEnable>
     f1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_RX_InterruptEnable>
     f1e:	08 95       	ret

00000f20 <UART_ReceiveTaskAndData>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	db 01       	movw	r26, r22
     f28:	1c 92       	st	X, r1
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	0f c0       	rjmp	.+30     	; 0xf4c <UART_ReceiveTaskAndData+0x2c>
     f2e:	30 ed       	ldi	r19, 0xD0	; 208
     f30:	39 0f       	add	r19, r25
     f32:	3a 30       	cpi	r19, 0x0A	; 10
     f34:	50 f4       	brcc	.+20     	; 0xf4a <UART_ReceiveTaskAndData+0x2a>
     f36:	3c 91       	ld	r19, X
     f38:	33 0f       	add	r19, r19
     f3a:	43 2f       	mov	r20, r19
     f3c:	44 0f       	add	r20, r20
     f3e:	44 0f       	add	r20, r20
     f40:	34 0f       	add	r19, r20
     f42:	93 0f       	add	r25, r19
     f44:	90 53       	subi	r25, 0x30	; 48
     f46:	9c 93       	st	X, r25
     f48:	10 82       	st	Z, r1
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	fe 01       	movw	r30, r28
     f4e:	e2 0f       	add	r30, r18
     f50:	f1 1d       	adc	r31, r1
     f52:	90 81       	ld	r25, Z
     f54:	91 11       	cpse	r25, r1
     f56:	eb cf       	rjmp	.-42     	; 0xf2e <UART_ReceiveTaskAndData+0xe>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <UART_Find_Task>:
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	7c 01       	movw	r14, r24
     f6c:	d6 2f       	mov	r29, r22
     f6e:	c0 e0       	ldi	r28, 0x00	; 0
     f70:	25 c0       	rjmp	.+74     	; 0xfbc <UART_Find_Task+0x5e>
     f72:	0c 2f       	mov	r16, r28
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	c8 01       	movw	r24, r16
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	82 95       	swap	r24
     f7e:	92 95       	swap	r25
     f80:	90 7f       	andi	r25, 0xF0	; 240
     f82:	98 27       	eor	r25, r24
     f84:	80 7f       	andi	r24, 0xF0	; 240
     f86:	98 27       	eor	r25, r24
     f88:	b7 01       	movw	r22, r14
     f8a:	88 58       	subi	r24, 0x88	; 136
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 6d 08 	call	0x10da	; 0x10da <string_compare>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 f4       	brne	.+36     	; 0xfba <UART_Find_Task+0x5c>
     f96:	00 0f       	add	r16, r16
     f98:	11 1f       	adc	r17, r17
     f9a:	02 95       	swap	r16
     f9c:	12 95       	swap	r17
     f9e:	10 7f       	andi	r17, 0xF0	; 240
     fa0:	10 27       	eor	r17, r16
     fa2:	00 7f       	andi	r16, 0xF0	; 240
     fa4:	10 27       	eor	r17, r16
     fa6:	f8 01       	movw	r30, r16
     fa8:	e8 58       	subi	r30, 0x88	; 136
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	06 8c       	ldd	r0, Z+30	; 0x1e
     fae:	f7 8d       	ldd	r31, Z+31	; 0x1f
     fb0:	e0 2d       	mov	r30, r0
     fb2:	8d 2f       	mov	r24, r29
     fb4:	09 95       	icall
     fb6:	8c 2f       	mov	r24, r28
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <UART_Find_Task+0x64>
     fba:	cf 5f       	subi	r28, 0xFF	; 255
     fbc:	c5 30       	cpi	r28, 0x05	; 5
     fbe:	c8 f2       	brcs	.-78     	; 0xf72 <UART_Find_Task+0x14>
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <UART_PushData>:
     fd0:	ac 01       	movw	r20, r24
     fd2:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <Stack_index>
     fd6:	3a 30       	cpi	r19, 0x0A	; 10
     fd8:	b1 f4       	brne	.+44     	; 0x1006 <UART_PushData+0x36>
     fda:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Clear>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_SetCursor>
     fe6:	8b e4       	ldi	r24, 0x4B	; 75
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_WriteString>
     fee:	08 95       	ret
     ff0:	8e e1       	ldi	r24, 0x1E	; 30
     ff2:	38 9f       	mul	r19, r24
     ff4:	f0 01       	movw	r30, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	ec 57       	subi	r30, 0x7C	; 124
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	e9 0f       	add	r30, r25
     ffe:	f1 1d       	adc	r31, r1
    1000:	20 83       	st	Z, r18
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <UART_PushData+0x38>
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	fa 01       	movw	r30, r20
    100a:	e9 0f       	add	r30, r25
    100c:	f1 1d       	adc	r31, r1
    100e:	20 81       	ld	r18, Z
    1010:	21 11       	cpse	r18, r1
    1012:	ee cf       	rjmp	.-36     	; 0xff0 <UART_PushData+0x20>
    1014:	8e e1       	ldi	r24, 0x1E	; 30
    1016:	38 9f       	mul	r19, r24
    1018:	f0 01       	movw	r30, r0
    101a:	11 24       	eor	r1, r1
    101c:	ec 57       	subi	r30, 0x7C	; 124
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	e9 0f       	add	r30, r25
    1022:	f1 1d       	adc	r31, r1
    1024:	10 82       	st	Z, r1
    1026:	3f 5f       	subi	r19, 0xFF	; 255
    1028:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <Stack_index>
    102c:	08 95       	ret

0000102e <UART_ReceiveStringAsynch>:
}



 void UART_ReceiveStringAsynch(u8*str)
 {
    102e:	bc 01       	movw	r22, r24
	 u8 j=0;
	 if(StrCompleteFlag==1)
    1030:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <StrCompleteFlag>
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	21 f5       	brne	.+72     	; 0x1080 <UART_ReceiveStringAsynch+0x52>
    1038:	0a c0       	rjmp	.+20     	; 0x104e <UART_ReceiveStringAsynch+0x20>
	 {
		 for(j=0;j<i-1;j++)
		 {
			 str[j]=data[j];
    103a:	fb 01       	movw	r30, r22
    103c:	e9 0f       	add	r30, r25
    103e:	f1 1d       	adc	r31, r1
    1040:	da 01       	movw	r26, r20
    1042:	a0 55       	subi	r26, 0x50	; 80
    1044:	bd 4f       	sbci	r27, 0xFD	; 253
    1046:	2c 91       	ld	r18, X
    1048:	20 83       	st	Z, r18
 void UART_ReceiveStringAsynch(u8*str)
 {
	 u8 j=0;
	 if(StrCompleteFlag==1)
	 {
		 for(j=0;j<i-1;j++)
    104a:	9f 5f       	subi	r25, 0xFF	; 255
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <UART_ReceiveStringAsynch+0x22>
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	49 2f       	mov	r20, r25
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <i>
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	31 09       	sbc	r19, r1
    105e:	42 17       	cp	r20, r18
    1060:	53 07       	cpc	r21, r19
    1062:	5c f3       	brlt	.-42     	; 0x103a <UART_ReceiveStringAsynch+0xc>
		 {
			 str[j]=data[j];
		 }
		 str[j]=0;
    1064:	fb 01       	movw	r30, r22
    1066:	e9 0f       	add	r30, r25
    1068:	f1 1d       	adc	r31, r1
    106a:	10 82       	st	Z, r1
		 UART_PushData(str);
    106c:	cb 01       	movw	r24, r22
    106e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_PushData>
		 i=0;
    1072:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <i>
		 StrCompleteFlag=0; 
    1076:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <StrCompleteFlag>
		 Finish_Flag=1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <Finish_Flag>
    1080:	08 95       	ret

00001082 <string_length>:
	{
		str[i]=0;
	}
}
u8 string_length(c8 *str)
{
    1082:	9c 01       	movw	r18, r24
	u8 i=0;
	for (i=0;str[i];i++);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	01 c0       	rjmp	.+2      	; 0x108a <string_length+0x8>
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	f9 01       	movw	r30, r18
    108c:	e8 0f       	add	r30, r24
    108e:	f1 1d       	adc	r31, r1
    1090:	90 81       	ld	r25, Z
    1092:	91 11       	cpse	r25, r1
    1094:	f9 cf       	rjmp	.-14     	; 0x1088 <string_length+0x6>
	return i;
}
    1096:	08 95       	ret

00001098 <string_reverse>:

void string_reverse(c8 *str)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
	u8 temp,len,i;
	
	len=string_length(str);
    109e:	0e 94 41 08 	call	0x1082	; 0x1082 <string_length>
	for(i=0;i<=len-1;i++)
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <string_reverse+0x2a>
	{
		temp=str[i];
    10a6:	de 01       	movw	r26, r28
    10a8:	a9 0f       	add	r26, r25
    10aa:	b1 1d       	adc	r27, r1
    10ac:	2c 91       	ld	r18, X
		str[i]=str[len-1];
    10ae:	e8 2f       	mov	r30, r24
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	ec 0f       	add	r30, r28
    10b6:	fd 1f       	adc	r31, r29
    10b8:	30 81       	ld	r19, Z
    10ba:	3c 93       	st	X, r19
		str[len-1]=temp;
    10bc:	20 83       	st	Z, r18
		len--;
    10be:	81 50       	subi	r24, 0x01	; 1
void string_reverse(c8 *str)
{
	u8 temp,len,i;
	
	len=string_length(str);
	for(i=0;i<=len-1;i++)
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	49 2f       	mov	r20, r25
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	31 09       	sbc	r19, r1
    10ce:	24 17       	cp	r18, r20
    10d0:	35 07       	cpc	r19, r21
    10d2:	4c f7       	brge	.-46     	; 0x10a6 <string_reverse+0xe>
		str[i]=str[len-1];
		str[len-1]=temp;
		len--;
	}

}
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <string_compare>:

u8 string_compare(u8*str1,u8*str2)
{
    10da:	dc 01       	movw	r26, r24
	int i;
	for (i=0;str1[i];i++)
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <string_compare+0x18>
	{
		if (str1[i]!=str2[i])
    10e2:	fb 01       	movw	r30, r22
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	40 81       	ld	r20, Z
    10ea:	94 13       	cpse	r25, r20
    10ec:	0a c0       	rjmp	.+20     	; 0x1102 <string_compare+0x28>
}

u8 string_compare(u8*str1,u8*str2)
{
	int i;
	for (i=0;str1[i];i++)
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	fd 01       	movw	r30, r26
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	90 81       	ld	r25, Z
    10fa:	91 11       	cpse	r25, r1
    10fc:	f2 cf       	rjmp	.-28     	; 0x10e2 <string_compare+0x8>
		if (str1[i]!=str2[i])
		{
			return 0;
		}
	}
	return 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	08 95       	ret
	int i;
	for (i=0;str1[i];i++)
	{
		if (str1[i]!=str2[i])
		{
			return 0;
    1102:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
    1104:	08 95       	ret

00001106 <NUM_tostring>:
void NUM_tostring(c8 *str,s32 num)
{
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	cb 01       	movw	r24, r22
    1112:	ba 01       	movw	r22, r20
	u8 i=0,flag=0;
	s32 r=0;
	
	if (num==0)
    1114:	61 15       	cp	r22, r1
    1116:	71 05       	cpc	r23, r1
    1118:	81 05       	cpc	r24, r1
    111a:	91 05       	cpc	r25, r1
    111c:	19 f4       	brne	.+6      	; 0x1124 <NUM_tostring+0x1e>
	{
		str[0]='0';
    111e:	20 e3       	ldi	r18, 0x30	; 48
    1120:	28 83       	st	Y, r18
		str[9]=0;
    1122:	19 86       	std	Y+9, r1	; 0x09
	}
	if (num<0)
    1124:	99 23       	and	r25, r25
    1126:	4c f4       	brge	.+18     	; 0x113a <NUM_tostring+0x34>
	{
		num=num*(-1);
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
		flag=1;
    1136:	01 e0       	ldi	r16, 0x01	; 1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <NUM_tostring+0x36>
	}
	return 1;
}
void NUM_tostring(c8 *str,s32 num)
{
	u8 i=0,flag=0;
    113a:	00 e0       	ldi	r16, 0x00	; 0
	if (num<0)
	{
		num=num*(-1);
		flag=1;
	}
	for (i=0;num!=0;i++)
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <NUM_tostring+0x62>
	{
		r=num%10;
    1140:	2a e0       	ldi	r18, 0x0A	; 10
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 ef 08 	call	0x11de	; 0x11de <__divmodsi4>
		r=r+'0';
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	c0 96       	adiw	r24, 0x30	; 48
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
		str[i]=r;
    1156:	fe 01       	movw	r30, r28
    1158:	e1 0f       	add	r30, r17
    115a:	f1 1d       	adc	r31, r1
    115c:	80 83       	st	Z, r24
		num=num/10;
    115e:	62 2f       	mov	r22, r18
    1160:	73 2f       	mov	r23, r19
    1162:	84 2f       	mov	r24, r20
    1164:	95 2f       	mov	r25, r21
	if (num<0)
	{
		num=num*(-1);
		flag=1;
	}
	for (i=0;num!=0;i++)
    1166:	1f 5f       	subi	r17, 0xFF	; 255
    1168:	61 15       	cp	r22, r1
    116a:	71 05       	cpc	r23, r1
    116c:	81 05       	cpc	r24, r1
    116e:	91 05       	cpc	r25, r1
    1170:	39 f7       	brne	.-50     	; 0x1140 <NUM_tostring+0x3a>
		r=num%10;
		r=r+'0';
		str[i]=r;
		num=num/10;
	}
	if (flag==1)
    1172:	01 30       	cpi	r16, 0x01	; 1
    1174:	31 f4       	brne	.+12     	; 0x1182 <NUM_tostring+0x7c>
	{
		str[i]='-';
    1176:	fe 01       	movw	r30, r28
    1178:	e1 0f       	add	r30, r17
    117a:	f1 1d       	adc	r31, r1
    117c:	8d e2       	ldi	r24, 0x2D	; 45
    117e:	80 83       	st	Z, r24
		i++;
    1180:	1f 5f       	subi	r17, 0xFF	; 255
	}
	str[i]=0;
    1182:	fe 01       	movw	r30, r28
    1184:	e1 0f       	add	r30, r17
    1186:	f1 1d       	adc	r31, r1
    1188:	10 82       	st	Z, r1
	string_reverse(str);
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 4c 08 	call	0x1098	; 0x1098 <string_reverse>
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <__udivmodsi4>:
    119a:	a1 e2       	ldi	r26, 0x21	; 33
    119c:	1a 2e       	mov	r1, r26
    119e:	aa 1b       	sub	r26, r26
    11a0:	bb 1b       	sub	r27, r27
    11a2:	fd 01       	movw	r30, r26
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <__udivmodsi4_ep>

000011a6 <__udivmodsi4_loop>:
    11a6:	aa 1f       	adc	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	ee 1f       	adc	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	a2 17       	cp	r26, r18
    11b0:	b3 07       	cpc	r27, r19
    11b2:	e4 07       	cpc	r30, r20
    11b4:	f5 07       	cpc	r31, r21
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__udivmodsi4_ep>
    11b8:	a2 1b       	sub	r26, r18
    11ba:	b3 0b       	sbc	r27, r19
    11bc:	e4 0b       	sbc	r30, r20
    11be:	f5 0b       	sbc	r31, r21

000011c0 <__udivmodsi4_ep>:
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a 94       	dec	r1
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <__udivmodsi4_loop>
    11cc:	60 95       	com	r22
    11ce:	70 95       	com	r23
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
    11d8:	bd 01       	movw	r22, r26
    11da:	cf 01       	movw	r24, r30
    11dc:	08 95       	ret

000011de <__divmodsi4>:
    11de:	05 2e       	mov	r0, r21
    11e0:	97 fb       	bst	r25, 7
    11e2:	1e f4       	brtc	.+6      	; 0x11ea <__divmodsi4+0xc>
    11e4:	00 94       	com	r0
    11e6:	0e 94 06 09 	call	0x120c	; 0x120c <__negsi2>
    11ea:	57 fd       	sbrc	r21, 7
    11ec:	07 d0       	rcall	.+14     	; 0x11fc <__divmodsi4_neg2>
    11ee:	0e 94 cd 08 	call	0x119a	; 0x119a <__udivmodsi4>
    11f2:	07 fc       	sbrc	r0, 7
    11f4:	03 d0       	rcall	.+6      	; 0x11fc <__divmodsi4_neg2>
    11f6:	4e f4       	brtc	.+18     	; 0x120a <__divmodsi4_exit>
    11f8:	0c 94 06 09 	jmp	0x120c	; 0x120c <__negsi2>

000011fc <__divmodsi4_neg2>:
    11fc:	50 95       	com	r21
    11fe:	40 95       	com	r20
    1200:	30 95       	com	r19
    1202:	21 95       	neg	r18
    1204:	3f 4f       	sbci	r19, 0xFF	; 255
    1206:	4f 4f       	sbci	r20, 0xFF	; 255
    1208:	5f 4f       	sbci	r21, 0xFF	; 255

0000120a <__divmodsi4_exit>:
    120a:	08 95       	ret

0000120c <__negsi2>:
    120c:	90 95       	com	r25
    120e:	80 95       	com	r24
    1210:	70 95       	com	r23
    1212:	61 95       	neg	r22
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	08 95       	ret

0000121c <__tablejump2__>:
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	05 90       	lpm	r0, Z+
    1222:	f4 91       	lpm	r31, Z
    1224:	e0 2d       	mov	r30, r0
    1226:	09 94       	ijmp

00001228 <__umulhisi3>:
    1228:	a2 9f       	mul	r26, r18
    122a:	b0 01       	movw	r22, r0
    122c:	b3 9f       	mul	r27, r19
    122e:	c0 01       	movw	r24, r0
    1230:	a3 9f       	mul	r26, r19
    1232:	70 0d       	add	r23, r0
    1234:	81 1d       	adc	r24, r1
    1236:	11 24       	eor	r1, r1
    1238:	91 1d       	adc	r25, r1
    123a:	b2 9f       	mul	r27, r18
    123c:	70 0d       	add	r23, r0
    123e:	81 1d       	adc	r24, r1
    1240:	11 24       	eor	r1, r1
    1242:	91 1d       	adc	r25, r1
    1244:	08 95       	ret

00001246 <_exit>:
    1246:	f8 94       	cli

00001248 <__stop_program>:
    1248:	ff cf       	rjmp	.-2      	; 0x1248 <__stop_program>
